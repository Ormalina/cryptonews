import requests
import pandas as pd
import schedule
import time
from bs4 import BeautifulSoup
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def get_gold_prices():
    url = "https://api.example.com/gold_prices"  # Замените на реальный API
    response = requests.get(url)
    data = response.json()
    df = pd.DataFrame(data)
    return df

def get_economic_events():
    url = "https://www.investing.com/economic-calendar/"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    events = []
   
    for event in soup.find_all("tr", class_="economicEvent"):
        date = event.find("td", class_="date").text.strip()
        event_name = event.find("td", class_="event").text.strip()
        impact = event.find("td", class_="impact").text.strip()
        events.append({"date": date, "event": event_name, "impact": impact})

    df = pd.DataFrame(events)
    return df

def analyze_data(gold_prices, economic_events):
    # Объединение данных по дате
    combined_data = pd.merge(gold_prices, economic_events, on='date', how='inner')
    return combined_data


def send_email_notification(events):
    sender_email = "your_email@example.com"
    receiver_email = "receiver_email@example.com"
    password = "your_password"

    subject = "Upcoming Economic Events Affecting Gold Prices"
    body = "Here are the upcoming economic events that might affect gold prices:\n\n"
    for event in events:
        body += f"{event['date']}: {event['event']} (Impact: {event['impact']})\n"

    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    with smtplib.SMTP('smtp.example.com', 587) as server:  # Замените на данные вашего SMTP сервера
        server.starttls()
        server.login(sender_email, password)
        text = msg.as_string()
        server.sendmail(sender_email, receiver_email, text)


def job():
    gold_prices = get_gold_prices()
    economic_events = get_economic_events()
    combined_data = analyze_data(gold_prices, economic_events)
    
   
    high_impact_events = combined_data[combined_data['impact'] == 'High']
    send_email_notification(high_impact_events.to_dict('records'))

schedule.every().day.at("09:00").do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
